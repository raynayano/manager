todos = []

def add_todo(todo):
    todos.append(todo)
    print("待办事项已添加。")

def view_todos():
    if todos:
        print("待办事项列表：")
        for index, todo in enumerate(todos, start=1):
            print(f"{index}. {todo}")
    else:
        print("没有待办事项。")

def complete_todo(index):
    if 1 <= index <= len(todos):
        completed_todo = todos.pop(index - 1)
        print(f"已完成事项：{completed_todo}")
    else:
        print("无效的待办事项索引。")

print("待办事项管理命令行工具")

while True:
    print("\n请选择操作：")
    print("1. 添加待办事项")
    print("2. 查看待办事项")
    print("3. 完成待办事项")
    print("4. 退出程序")

    choice = input("请选择操作（输入数字）：")

    if choice == '4':
        print("谢谢使用，再见！")
        break

    if choice == '1':
        todo = input("请输入待办事项：")
        add_todo(todo)
    elif choice == '2':
        view_todos()
    elif choice == '3':
        index = int(input("请输入要完成的待办事项索引："))
        complete_todo(index)
    else:
        print("无效的选择，请重新输入。")

//以上代码是一个简单的待办事项管理命令行工具。用户可以选择添加待办事项、查看待办事项列表和完成待办事项。

//add_todo() 函数将用户输入的待办事项添加到待办事项列表中。view_todos() 函数用于显示当前的待办事项列表。complete_todo() 函数用于将指定索引的待办事项标记为已完成并从列表中删除。

//应用程序使用一个无限循环来等待用户输入操作和相应的信息，并根据用户选择执行相应的操作。用户可以选择退出程序来结束应用程序的运行。

//请注意，这只是一个简单的示例，待办事项列表仅存储在内存中，并没有持久化存储功能。在实际项目中，您可能需要考虑更复杂的数据存储和更多的待办事项管理功能，以实现一个更完善的待办事项管理工具。
